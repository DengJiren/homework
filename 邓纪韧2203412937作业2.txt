1.瀑布模型的特点：
	（1）阶段间有顺序性和依赖性{必须等前一阶段的工作完成之后，才能开始后一阶段的工作；前一阶段的输出文档就是后一阶段的输入文档，因此，只有前一阶段的输出文档正确，后一阶段的工作才能获得正确的结果}
	（2）推迟实现的特点{瀑布模型在编码之前设置了系统分析与系统设计的各个阶段，分析与设计阶段的基本任务规定，在这两个阶段主要考虑目标系统的逻辑模型，不涉及软件的物理实现。清楚区分逻辑设计与物理设计，尽可能推迟程序的物理实现，是按照瀑布模型开发软件的一条重要的指导思想。}
	（3）质量保证的观点{软件工程的基本目标是优质、高产。为了保证所开发的软件的质量，在瀑布模型的每个阶段都应该坚持两个重要做法。每个阶段都必须完成规定的文档，没有交出合格的文档就是没有完成该阶段的任务。完整、准确的合格文档不仅仅是软件开发时期各类人员之间相互通信的媒介，也是运行时期对软件进行维护的重要依据。每个阶段结束前都要对所完成的文档进行评审，以尽早发现问题，改正错误。事实上，越是早期阶段犯下的错误，暴漏出来的时间就越晚，排除故障改正错误所需付出的代价也越高。因此，及时审查，是保证软件质量、降低软件成本的重要措施。
	
2.敏捷开发的特点：
（1）首要任务是尽早地、持续地交付可评价的软件，以使客户满意。
（2）乐于接受需求变更，即使在开发后期也是如此。敏捷软件开发能够驾驭需求的变化，从而为客户赢得竞争优势。
（3）在整个项目开发期间，业务人员和开发人员必须朝夕工作在一起。
（4）围绕那些有推动力的人们来构建项目，给予他们所需的环境和支持，并且相信他们能够把工作做好。
（5）开发团队及在开发团队内部进行最快速、有效的传递信息的方法是面对面交谈。
（6）可使用的软件是进度的主要衡量指标。
（7）提倡可持续发展。出资人、开发人员及使用者应该共同维持稳定的开发速度。
（8）为了增强敏捷能力，应持续关注技术上的杰出成果和良好的设计。
（9）简洁，最小化那些没有必要投入的工作量是至关重要的。
（10）最好的架构、需求和设计都源于自我组织的团队。
（11）团队定期反思如何变得更有战斗力，然后相应地转变井调整其行为。
（12）频繁交付可使用的软件，交付的间隔越短越好，可以从几个月缩减到几个星期。

现场客户：
定义：要求至少有一名实际的客户代表在整个项目开发周期在现场负责确定需求、回答团队问题以及编写功能验收测试
使用场景：当开发一个功能复杂或者功能描述不是很清晰时，有客户在可以实时跟进，对功能提出修改，并且在项目初期完全弄清楚具体功能对后续返工的风险就降低了不少。

代码规范：
定义：强调用指定严格的代码规范来交流沟通，而不是借助于复杂繁多的文档
使用场景：对于开发一个大型的软件项目来说，代码量无疑是巨大的，而彼此的配合需要建立在读懂他人代码的前提上。有了统一的代码规范后，代码的团队可读性和可维护性就大大提升了。